# -*- coding: utf-8 -*-
"""Data processing and data loading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hJPzcjIuGqvOIwOJf3mDu69iyE1TBuos
"""

import torch
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
import matplotlib.pyplot as plt

# Define the transformation
data_transform = transforms.Compose([
    # Resize images
    transforms.Resize(size=(64, 64)),
    # Flip the images randomly on the horizontal
    transforms.RandomHorizontalFlip(p=0.5),
    # Turn the image into a torch.Tensor
    transforms.ToTensor()
])

# Function to plot transformed images
def plot_transformed_images(image_paths: list, transform, n=3, seed=None):
    # Select random images from a path of images and load then transform them
    # Then plot the original vs the transformed version
    if seed:
        random.seed(seed)
    random_image_paths = random.sample(image_paths, k=n)
    for image_path in random_image_paths:
        with Image.open(image_path) as f:
            fig, ax = plt.subplots(nrows=1, ncols=2)
            ax[0].imshow(f)
            ax[0].set_title(f'Original\nSize: {f.size}')
            ax[0].axis(False)

            transformed_image = transform(f).permute(1, 2, 0)  # (C, H, W) -> (H, W, C)
            ax[1].imshow(transformed_image)
            ax[1].set_title(f'Transformed\nShape: {transformed_image.shape}')
            ax[1].axis('off')

            fig.suptitle(f'Class: {image_path.parent.stem}', fontsize=16)

# Plot some transformed images
plot_transformed_images(image_paths=image_path_list, transform=data_transform, n=3, seed=42)

# Load the datasets
train_data = datasets.ImageFolder(root=train_dir, transform=data_transform, target_transform=None)
test_data = datasets.ImageFolder(root=test_dir, transform=data_transform, target_transform=None)
val_data = datasets.ImageFolder(root=val_dir, transform=data_transform, target_transform=None)

# Function to show random images
import torchvision.transforms as transforms

def show_random_images(dataset, title, num_images=4):
    plt.figure(figsize=(12, 12))
    for i in range(num_images):
        idx = torch.randint(len(dataset), size=(1,)).item()
        img, label = dataset[idx]
        img = transforms.ToPILImage()(img)
        plt.subplot(4, 4, i + 1)
        plt.imshow(img)
        plt.title(dataset.classes[label])
        plt.axis('off')
    plt.suptitle(title)
    plt.show()

show_random_images(train_data, 'Random Images')

# Combine all datasets into one
from torch.utils.data import ConcatDataset, DataLoader, Subset
from sklearn.model_selection import train_test_split
import numpy as np

torch.manual_seed(42)
combined_data = ConcatDataset([train_data, val_data, test_data])

# Determine the indices for splitting
total_size = len(combined_data)
train_size = int(0.7 * total_size)
val_size = int(0.1 * total_size)
test_size = total_size - train_size - val_size

torch.manual_seed(42)
indices = list(range(total_size))
np.random.shuffle(indices)
train_indices, temp_indices = indices[:train_size], indices[train_size:]
val_indices, test_indices = temp_indices[:val_size], temp_indices[val_size:]

# Create subsets based on indices
train_dataset = Subset(combined_data, train_indices)
val_dataset = Subset(combined_data, val_indices)
test_dataset = Subset(combined_data, test_indices)

# Define the data loaders
BATCH_SIZE = 16
torch.manual_seed(42)
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True, num_workers=os.cpu_count())
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=os.cpu_count())
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, num_workers=os.cpu_count())